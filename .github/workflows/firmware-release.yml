name: Build and Release Firmware

on:
  push:
    tags:
      - 'v*'  # Wird ausgelöst, wenn du einen Tag mit v setzt, z.B. v1.0.1

# Wichtig: Berechtigungen explizit definieren
permissions:
  contents: write  # Benötigt für das Erstellen von Releases und Hochladen von Assets

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Cache PlatformIO
        uses: actions/cache@v3
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-platformio-${{ hashFiles('platformio.ini') }}
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install platformio
      
      - name: Update Version in Build Files
        run: |
          # Hole Version ohne 'v' Prefix
          VERSION="${{ github.ref_name }}"
          VERSION_NUM="${VERSION#v}"
          echo "Aktualisiere Versionen auf $VERSION_NUM"
          
          # Aktualisiere Version in config.h für Build
          sed -i 's/#define FW_VERSION ".*"/#define FW_VERSION "'$VERSION_NUM'"/' src/config.h
          cat src/config.h | grep FW_VERSION
          
          # Aktualisiere Version in manifest.json
          sed -i 's/"version": ".*"/"version": "'$VERSION_NUM'"/' web/manifest.json
          cat web/manifest.json | grep version
      
      - name: Build Firmware
        run: |
          platformio run -e nodemcuv2
      
      - name: Build File System
        run: |
          platformio run --target buildfs
      
      - name: Copy Binaries to Web Folder
        run: |
          cp .pio/build/nodemcuv2/firmware.bin web/
          cp .pio/build/nodemcuv2/littlefs.bin web/
          
          # Überprüfen der Dateien
          ls -la web/*.bin
      
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            web/firmware.bin
            web/littlefs.bin
          body: |
            # Hollowclock Firmware ${{ github.ref_name }}
            
            ## Installation
            
            ### Über ESP Web Tools (empfohlen)
            Besuche [https://hollowclock.netlify.app](https://hollowclock.netlify.app) und folge den Anweisungen.
            
            ### Manuell
            - Firmware: web/firmware.bin
            - Dateisystem: web/littlefs.bin