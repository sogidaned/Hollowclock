name: Build and Release Firmware

on:
  push:
    tags:
      - 'v*'  # Wird ausgelöst, wenn du einen Tag mit v setzt, z.B. v1.0.1

# Wichtig: Berechtigungen explizit definieren
permissions:
  contents: write  # Benötigt für das Erstellen von Releases und Hochladen von Assets

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Cache PlatformIO
        uses: actions/cache@v3
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-platformio-${{ hashFiles('platformio.ini') }}
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install platformio
      
      - name: Build Firmware
        run: |
          platformio run -e nodemcuv2
      
      - name: Copy firmware files to web folder
        run: |
          cp .pio/build/nodemcuv2/firmware.bin web/
          pio run -t buildfs
          cp .pio/build/nodemcuv2/littlefs.bin web/
      
      # Der modernere Ansatz für Releases
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            web/firmware.bin
            web/littlefs.bin

      - name: Update Version
        run: |
          python .github/scripts/update_version.py ${{ github.ref_name }}
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add src/main.cpp web/manifest.json
          git commit -m "Update version to ${{ github.ref_name }}"
          git push